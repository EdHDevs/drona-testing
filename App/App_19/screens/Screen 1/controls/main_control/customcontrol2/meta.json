{
    "__dhq_default_formula_Dtype": "string",
    "__dhq_formula_Dtype": "string",
    "__dhq_keywords_mapping_Dtype": "object",
    "__LiveData_Dtype": "string",
    "allow_options_addition_in_editor": true,
    "caching": false,
    "cid": "c69RrnxtqrVFIuCJJt9T",
    "class_name": "test",
    "ctrl_id": "",
    "currentData": {
        "from": {
            "latitude": 43.66092,
            "longitude": -79.36143
        }
    },
    "custom_actions": [],
    "data_submission_enabled": true,
    "data_type": "string",
    "dfmv_selected": "default",
    "dhq_config": {
        "strict_update": [
            "show_new_property",
            "dhq_config"
        ],
        "update_to_theme_varaibles": []
    },
    "dhq_data_process": "",
    "dhq_default_data_process": "",
    "dhq_default_formula": "",
    "dhq_external_css": {
        "addCode": false,
        "data": {}
    },
    "dhq_nsf_replaced": false,
    "dhq_olddt_map": {},
    "dhq_req_stats": {
        "status": ""
    },
    "dhq_show_rawdata": true,
    "dhq_submit_condition": "always",
    "dhq_tfd": true,
    "dhqEvtConverted": true,
    "dhqGrid": {
        "w": 24,
        "h": 69,
        "x": 0,
        "y": 152
    },
    "dhqGridChanged": false,
    "dhqGridDesktop": {
        "w": 24,
        "h": 69,
        "x": 0,
        "y": 152
    },
    "disabled": false,
    "eventMapping": {
        "demo": "action1741618765942"
    },
    "field_available_in_database_editor": false,
    "field_composition_type": "single",
    "field_config": {},
    "field_data_model": "",
    "field_data_model_binding_default_value_query": "",
    "field_data_model_binding_default_value_query_with_id": "",
    "field_data_model_binding_formula": "",
    "field_data_model_binding_manual_query": "DATABUILDER()",
    "field_data_model_binding_manual_query_with_id": "DATABUILDER()",
    "field_data_model_binding_type": "manual_query",
    "field_database_editor_data_format": "single_line_text",
    "field_display_key_name": "customcontrol2",
    "field_editable_in_database_editor": false,
    "field_fullview": false,
    "field_key_name": "dhq_custom_control_c69RrnxtqrVFIuCJJt9T",
    "field_options": {
        "options": [
            {
                "code": "demo",
                "id": "action1741618765942"
            }
        ]
    },
    "field_responsive": false,
    "field_type": "dhq_custom_control",
    "field_values_addition_enabled_in_database_editor": true,
    "field_values_source": "",
    "formbuilder_theme": "#bbbbbb",
    "grid_dynamic_height": true,
    "grid_maintain_space": false,
    "grid_max_height": "",
    "grid_max_height_unit": "px",
    "hidden": false,
    "input_control_height": "2.5rem",
    "input_font_color": "var(--DHQ-primary-font-color)",
    "input_font_size": "var(--DHQ-normal-font)",
    "input_font_weight": "var(--DHQ-normal-weight)",
    "input_placeholder_font_weight": "var(--DHQ-normal-weight)",
    "input_placeholder_text_color": "#aaaaaa",
    "input_placeholder_text_size": "var(--DHQ-small-font)",
    "input_type": "single",
    "is_master_control": false,
    "is_outlet_control": false,
    "is_repeat_outlet_control": false,
    "is_variable": false,
    "isDhqGridCtrl": true,
    "isDhqHideOnDesktop": false,
    "isDhqHideOnMobile": false,
    "label": "Custom Control",
    "label_font_size": "var(--DHQ-control-title)",
    "label_font_size_unit": "",
    "label_font_weight": "var(--DHQ-bold)",
    "label_font_weight_class": "font-weight-normal",
    "label_hidden": true,
    "label_left_width": "33",
    "label_left_width_unit": "%",
    "label_position": "top",
    "label_text_alignment": "left",
    "label_text_color": "var(--DHQ-primary-font-color)",
    "parent_id": "",
    "required": false,
    "sb_mode": "JS",
    "show_description": false,
    "show_dfm": false,
    "show_new_property": true,
    "show_tooltip": false,
    "sid": "sc69RrnxtqrVFIuCJJt9T",
    "tabIndex": "",
    "textarea_data": "<html>\n    <style>\n      input[type=text] {\n        width: 100%;\n        border: 2px solid #aaa;\n        border-radius: 4px;\n        margin: 8px 1px;\n        outline: none;\n        padding: 8px;\n        box-sizing: border-box;\n        transition: 0.3s;\n      }\n\n      input[type=text]:focus {\n        border-color: dodgerBlue;\n        box-shadow: 0 0 8px 0 dodgerBlue;\n      }\n    </style>\n    <script src=\"https://unpkg.com/react@17/umd/react.development.js\" crossorigin=\"\"></script>\n    <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\" crossorigin=\"\"></script>\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n  <body>\n      <div id=\"root\"></div>\n      <script type=\"text/babel\">\n        const { useState , useEffect} = React;\n\n        const App = () => {\n          const [inputValue, setInputValue] = useState('');\n          const callback = function (payload) {\n            if (payload.type == \"setValue\") {\n              setInputValue(payload.value);\n            }\n            if (payload.type == \"getValue\") {\n              CI.returnValue(inputValue);\n            }\n            if (payload.type == \"onReload\"){\n              setInputValue(payload.value.formulaData)              \n            }\n            if (payload.type == \"runValidation\") {\n              if (inputValue.includes('@')) {\n                CI.returnValidationResult(false);\n              } else {\n                CI.returnValidationResult(true);\n              }\n            }\n          };\n        CI.init(callback);\n        const handleInputChange = (e) => {\n            let value = e.target.value;\n            setInputValue(value);\n        };\n        useEffect(() => {\n            // This effect will execute after every state update of inputValue\n            let errorMessages = [];\n            if (inputValue.includes('@')) {\n              errorMessages.push(\"Does not accept special character!\");\n            }\n            if (errorMessages.length > 0) {\n              // DronaHQ to display error message for this control\n              CI.showError(errorMessages);\n            } else {\n              // Clear any error messages previously showed for this \n              CI.clearError();\n              // Notify change to any other control or data query variable\n              CI.triggerChange();\n              // TODO: You can add Custom Event named - on_change\n              CI.triggerAction(\"on_change\");\n            }\n        }, [inputValue]);\n          return (\n            <div>\n              <h1>Input</h1>\n              <input\n                type=\"text\"\n                placeholder=\"Your name\"\n                value={inputValue}\n                onChange={handleInputChange}\n              />\n            </div>\n          );\n        };\n        ReactDOM.render(<App />, document.getElementById('root'));\n      </script>\n  </body>\n</html>",
    "tip_description": "",
    "tooltip": "",
    "type": "input",
    "validation": [],
    "wrapper_content_alignment": "flex-start"
}