{
    "__dhq_default_formula_Dtype": "string",
    "__dhq_formula_Dtype": "string",
    "__dhq_keywords_mapping_Dtype": "object",
    "__LiveData_Dtype": "string",
    "allow_options_addition_in_editor": true,
    "caching": false,
    "cid": "c69RrnxtqrVFIuCJJt9T",
    "class_name": "test",
    "ctrl_id": "",
    "currentData": "43.66092",
    "custom_actions": [],
    "data_submission_enabled": true,
    "data_type": "string",
    "dfmv_selected": "default",
    "dhq_config": {
        "strict_update": [
            "show_new_property",
            "dhq_config"
        ],
        "update_to_theme_varaibles": []
    },
    "dhq_data_process": "",
    "dhq_default_data_process": "",
    "dhq_default_formula": "",
    "dhq_external_css": {
        "addCode": false,
        "data": {}
    },
    "dhq_nsf_replaced": false,
    "dhq_olddt_map": {},
    "dhq_req_stats": {
        "status": ""
    },
    "dhq_show_rawdata": true,
    "dhq_submit_condition": "always",
    "dhq_tfd": true,
    "dhqEvtConverted": true,
    "dhqGrid": {
        "w": 24,
        "h": 69,
        "x": 0,
        "y": 152
    },
    "dhqGridChanged": false,
    "dhqGridDesktop": {
        "w": 24,
        "h": 69,
        "x": 0,
        "y": 152
    },
    "disabled": false,
    "eventMapping": {
        "demo": "action1741618765942"
    },
    "field_available_in_database_editor": false,
    "field_composition_type": "single",
    "field_config": {},
    "field_data_model": "",
    "field_data_model_binding_default_value_query": "",
    "field_data_model_binding_default_value_query_with_id": "",
    "field_data_model_binding_formula": "",
    "field_data_model_binding_manual_query": "DATABUILDER()",
    "field_data_model_binding_manual_query_with_id": "DATABUILDER()",
    "field_data_model_binding_type": "manual_query",
    "field_database_editor_data_format": "single_line_text",
    "field_display_key_name": "customcontrol2",
    "field_editable_in_database_editor": false,
    "field_fullview": false,
    "field_key_name": "dhq_custom_control_c69RrnxtqrVFIuCJJt9T",
    "field_options": {
        "options": [
            {
                "code": "demo",
                "id": "action1741618765942"
            }
        ]
    },
    "field_responsive": false,
    "field_type": "dhq_custom_control",
    "field_values_addition_enabled_in_database_editor": true,
    "field_values_source": "",
    "formbuilder_theme": "#bbbbbb",
    "grid_dynamic_height": true,
    "grid_maintain_space": false,
    "grid_max_height": "",
    "grid_max_height_unit": "px",
    "hidden": false,
    "input_control_height": "2.5rem",
    "input_font_color": "var(--DHQ-primary-font-color)",
    "input_font_size": "var(--DHQ-normal-font)",
    "input_font_weight": "var(--DHQ-normal-weight)",
    "input_placeholder_font_weight": "var(--DHQ-normal-weight)",
    "input_placeholder_text_color": "#aaaaaa",
    "input_placeholder_text_size": "var(--DHQ-small-font)",
    "input_type": "single",
    "is_master_control": false,
    "is_outlet_control": false,
    "is_repeat_outlet_control": false,
    "is_variable": false,
    "isDhqGridCtrl": true,
    "isDhqHideOnDesktop": false,
    "isDhqHideOnMobile": false,
    "label": "Custom Control",
    "label_font_size": "var(--DHQ-control-title)",
    "label_font_size_unit": "",
    "label_font_weight": "var(--DHQ-bold)",
    "label_font_weight_class": "font-weight-normal",
    "label_hidden": true,
    "label_left_width": "33",
    "label_left_width_unit": "%",
    "label_position": "top",
    "label_text_alignment": "left",
    "label_text_color": "var(--DHQ-primary-font-color)",
    "parent_id": "",
    "required": false,
    "sb_mode": "JS",
    "show_description": false,
    "show_dfm": false,
    "show_new_property": true,
    "show_tooltip": false,
    "sid": "sc69RrnxtqrVFIuCJJt9T",
    "tabIndex": "",
    "textarea_data": "<html>\n  <style>\n    input[type=text] {\n      width: 100%;\n      border: 2px solid #aaa;\n      border-radius: 4px;\n      margin: 8px 1px;\n      outline: none;\n      padding: 8px;\n      box-sizing: border-box;\n      transition: 0.3s;\n    }\n\n    input[type=text]:focus {\n      border-color: dodgerBlue;\n      box-shadow: 0 0 8px 0 dodgerBlue;\n    }\n  </style>\n  <script src=\"https://unpkg.com/react@17/umd/react.development.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"text/babel\">\n      const { useState, useEffect } = React;\n\n      const App = () => {\n        const [latitude, setLatitude] = useState('');\n\n        const callback = function (payload) {\n          console.log(\"[CI INIT] Payload received:\", payload);\n\n          if (payload.type === \"setValue\") {\n            console.log(\"[setValue] Raw payload.value:\", payload.value);\n            let parsedValue = payload.value;\n\n            if (typeof parsedValue === \"string\") {\n              try {\n                parsedValue = JSON.parse(parsedValue);\n                console.log(\"[setValue] Parsed JSON string:\", parsedValue);\n              } catch (e) {\n                console.error(\"Failed to parse payload.value string:\", e);\n                return;\n              }\n            }\n\n            if (parsedValue?.from?.latitude !== undefined) {\n              console.log(\"[setValue] Setting latitude to:\", parsedValue.from.latitude);\n              setLatitude(parsedValue.from.latitude.toString());\n            } else {\n              console.warn(\"[setValue] from.latitude not found in parsed payload.\");\n            }\n          }\n\n          if (payload.type === \"getValue\") {\n            console.log(\"[getValue] Returning latitude:\", latitude);\n            CI.returnValue(latitude);\n          }\n\n          if (payload.type === \"onReload\") {\n            let parsedValue = payload.value;\n            if (typeof parsedValue === \"string\") {\n              try {\n                parsedValue = JSON.parse(parsedValue);\n              } catch (e) {\n                console.error(\"Failed to parse onReload payload:\", e);\n                return;\n              }\n            }\n\n            if (parsedValue?.from?.latitude !== undefined) {\n              console.log(\"[onReload] Reloading latitude to:\", parsedValue.from.latitude);\n              setLatitude(parsedValue.from.latitude.toString());\n            }\n          }\n\n          if (payload.type === \"runValidation\") {\n            const isValid = !isNaN(parseFloat(latitude));\n            console.log(\"[runValidation] Is valid latitude?\", isValid);\n            CI.returnValidationResult(isValid);\n          }\n        };\n\n        console.log(\"[App] Initializing DronaHQ CI...\");\n        CI.init(callback);\n\n        const handleInputChange = (e) => {\n          const value = e.target.value;\n          console.log(\"[inputChange] New value:\", value);\n          setLatitude(value);\n        };\n\n        useEffect(() => {\n          console.log(\"[useEffect] Latitude updated:\", latitude);\n\n          const errors = [];\n          if (isNaN(parseFloat(latitude))) {\n            errors.push(\"Latitude must be a number.\");\n          }\n\n          if (errors.length > 0) {\n            console.log(\"[useEffect] Showing error:\", errors);\n            CI.showError(errors);\n          } else {\n            console.log(\"[useEffect] Clearing errors, triggering change and action\");\n            CI.clearError();\n            CI.triggerChange();\n            CI.triggerAction(\"on_change\");\n          }\n        }, [latitude]);\n\n        return (\n          <div>\n            <h1>Latitude Input</h1>\n            <input\n              type=\"text\"\n              placeholder=\"Latitude\"\n              value={latitude}\n              onChange={handleInputChange}\n            />\n          </div>\n        );\n      };\n\n      ReactDOM.render(<App />, document.getElementById('root'));\n    </script>\n  </body>\n</html>",
    "tip_description": "",
    "tooltip": "",
    "type": "input",
    "validation": [],
    "wrapper_content_alignment": "flex-start"
}